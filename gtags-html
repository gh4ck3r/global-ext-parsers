#!/usr/bin/env node
// vim:ft=javascript:ts=2:sw=2:et:
"use strict";

const {readFile, exitWithError, printTag} = require('./common.js');
const {tagJavaScript} = require("./js-parser.js");

const argv = process.argv.slice(2);
const options = argv.filter(v => v.startsWith("--"));

const sourceFiles = argv.filter(v => !options.includes(v));
if (sourceFiles.length === 0) {
  console.warn(`No args`);
  process.exit(1);
}

const DEF = 'D';

const htmlparser = require("htmlparser2");
let curFile, curLine, sources;

let inScript = false;
let lineBeginScript = 0;
let javaScript = [];
const parser = new htmlparser.Parser({
  onattribute: (aName, aValue) => {
    switch (aName) {
      case "id":
      case "class":
      case "name":
        const column = 0;//sources[curLine-1].indexOf(aValue);  // FIXME
        printTag({
          type: DEF,
          name: aValue,
          path: curFile,
          line: curLine,
          column: column+1,
          ref: sources[curLine-1]
        });
        break;
    }
  },
  onopentagname(aName) {
    if (aName === "script") {
      inScript = true;
      lineBeginScript = curLine;
    }
  },
  onclosetag(aName) {
    if (aName === "script") {
      inScript = false;
      const src = javaScript.join('\n');
      if (src.trim().length) {
        const column = sources[lineBeginScript-1].indexOf(javaScript[0])+1;
        tagJavaScript(src, curFile, lineBeginScript, column);
      }
      javaScript.length = 0;
    }
  },
  ontext(aText) {
    if (!inScript) return;
    // FIXME : This is for a bug of htmlparser2
    if (aText.startsWith('<')) {
      aText = javaScript.pop() + aText;
    }
    javaScript.push(aText);
  }
}, {decodeEntities: true, lowerCaseAttributeNames: true});

sourceFiles.forEach(file => {
  readFile(file)
    .catch(exitWithError)
    .then(aContent => {
      curFile = file;
      sources = aContent.split('\n');
      for (let idx = 0; idx < sources.length; ++idx) {
        curLine = idx+1;
        parser.write(sources[idx]);
      }
    })
    .then( () => {parser.end();} );
});
